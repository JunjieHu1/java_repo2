1: Java中除了原始类型之外的所有元素都是对象。Java对象都是在堆中构造的。
　　Java实例化的过程：
　　　　静先父先　构造函数最后
　　
    父类静态域 ---> 父类静态初始化块　---> 子类静态域　---> 子类初始化块　---> 
    父类实例域 ---> 父类初始化块　　　---> 父类构造函数　--->
    子类实例域 ---> 子类初始化块　---> 子类构造函数

2: 静态域和静态方法

　　静态域和静态方法又称之为类域和类方法，在内存中唯一存在。
　　静态方法中只能使用静态域和静态方法。但是可以通过对象使用对象的方法。
　　可以通过　类名.静态域/静态方法　或者　对象.静态域/静态方法　使用静态域和静态方法

3: Java中只有在没有提供构造函数的时候，系统才会自动提供一个无参构造函数。

4: this  this(arg...) super  super(arg...)
  
   this --- 本类当前对象的应用
     ex: this.id = id; this.getId();
   this(arg...) --- 引用本类中的函数签名一致其他构造函数
   
   super --- 不是父类对象的一个引用，只是一个指示编译器调用父类方法的特殊关键字
   　ex: super.getId();
   super(arg...) --- 调用父类构造器，但是必须是子类构造器的第一句

5: 修饰关键字可见度排名：

　　public > protected > default(什么也不写) > private

    final域不可修改；
    final方法不可覆盖；
    final类不可继承；

6: 抽象类和接口

　抽象类是指被 abstract 关键字修饰的类。
　抽象类中可以有抽象方法，也可以没有

7: 内部类
　　分类：常规内部类
	  静态内部类
	  局部内部类：　常规内部类、匿名内部类

　　内部类语法：引用外围类的域和方法：　OuterClass.this.?   ex: OuterClass.this.id  OuterClass.this.getId()
     		在外围类中实例化内部类：　OuterObject.new InnerClass(...)

　　常规内部类：在一个类的内部定义，且没有被　static 关键词修饰的类
		内部类可以被private关键词修饰，从而实现封装、隐藏
		内部类对象拥有一个对外围类对象的引用
		内部类可以访问外围类的所有域，包括私有变量
		内部类内部类中不能存在静态方法，但是可以有静态域（此静态域一定是不可变的），即一定被　static final 修饰

    静态内部类：在一个类的内部定义，且被　static 关键字修饰的类
    　　	没有对外围类对象的引用
    		静态内部类中可以有静态域和静态方法
		位于接口中的内部类自动被　public static 修饰
		静态内部类的使用场景：在内部类不需要访问外围类对象的情况下，应该使用静态内部类

8: 接口
　　　　　　　　接口中可声明方法
		接口中可定义常量（接口中的域都将自动被　public static final 修饰）
		接口中可实现默认方法（此方法被　default 关键字修饰）
	　　　　接口中可实现静态方法
	        接口中的所有方法均被　public 所修饰

　　为什么要使用接口：
	Java不支持多重继承，也就是说一个Java类只能继承一个Java类，不能继承多个Java类。
	但是Java可以实现多个接口，从而集成更多功能。总之，Java接口可以提供其他语言中的多重继承的大多数好处，
	同时还能避免多重继承的复杂性和低效性

    接口中的默认方法冲突的解决方法：
    　　一句话：　　　（超）类优先、
    　　
    　　1: 若　超类和接口发生冲突 ------> 超类优先
    　　2: 若　接口之间发生冲突　 ------> 接口的实现类必须覆盖次默认方法

9: Java所有类的父类 Object
















